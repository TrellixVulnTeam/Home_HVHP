R2 <- function(pred, obs, formula = "corr", na.rm = FALSE) {
n <- sum(complete.cases(pred))
switch(formula,
corr = cor(obs, pred, use = ifelse(na.rm, "complete.obs", "everything"))^2,
traditional = 1 - (sum((obs-pred)^2, na.rm = na.rm)/((n-1)*var(obs, na.rm = na.rm))))
}
# Run on initial 267 observations of test
R2(RandPy$RPH, test$PH[1:267]) # Functions with subset properly
# Compute performance metrics
R <- postResample(pred = RandPy$RPH, obs = test$PH[1:267])
Py <- postResample(pred = RandPy$PyPH, obs = test$PH[1:267])
pred.comparison <- rbind(R, Py) %>%
data.frame() %>%
arrange(desc(MAE)) %>%
t() %>%
data.frame() %>%
mutate(Difference = Py - R) %>%
tibble::rownames_to_column("Type")
# Tabulate results
flextable(pred.comparison) %>%
theme_vanilla() %>%
set_table_properties(layout = "autofit")
pred.comparison %>%
gather(key, value) %>%
filter(key != "Type") %>%
mutate(Value = as.numeric(value)) %>%
filter(key !="Difference") %>%
ggplot(aes(key, Value)) + geom_pointrange(aes(ymin = min(Py),
ymax = max(Py),
color=key,
)) +
geom_hline(yintercept = 0.24442111, color = "Orange") +
geom_hline(yintercept = 0.01246797, color = "Orange") +
geom_hline(yintercept = 0.23575419, color = "Black") +
geom_hline(yintercept = 0.01983906, color = "Black") +
annotate("rect", xmin = 0.01983906, xmax=0.01246797,
ymin = 1, ymax = 0, alpha = 0.25) +
coord_flip() +
labs(subtitle = "Performance Differences by Programming Language")
RandPy.boxplot <- RandPy %>%
dplyr::select(RPH, PyPH, PredictionNumber) %>%
rename(R=RPH, Py=PyPH) %>%
gather(key, value, -PredictionNumber) %>%
group_by(key) %>%
ggplot(aes(value, color = key)) + geom_boxplot(aes()) +
labs(subtitle = "Distribution of Predictions by Language")
RandPy.hist <- RandPy %>%
dplyr::select(RPH, PyPH, PredictionNumber) %>%
rename(R=RPH, Py=PyPH) %>%
gather(key, value, -PredictionNumber) %>%
group_by(key) %>%
ggplot(aes(value, fill = key)) +
geom_histogram(aes(alpha = .5)) +
theme(legend.position = "none") +
labs(subtitle = "Stacked Count of Predictions by Language")
RandPy.density <- RandPy %>%
dplyr::select(RPH, PyPH, PredictionNumber) %>%
rename(R=RPH, Py=PyPH) %>%
gather(key, value, -PredictionNumber) %>%
group_by(key) %>%
ggplot(aes(value, fill = key, color = key)) +
geom_density(aes(alpha = .5)) +
theme(legend.position = "none") +
labs(subtitle = "Density of Predictions by Language")
RandPy.loess <-RandPy %>%
dplyr::select(RPH, PyPH, PredictionNumber) %>%
rename(R=RPH, Py=PyPH) %>%
gather(key, value, -PredictionNumber) %>%
group_by(key) %>%
ggplot(aes(PredictionNumber, value, fill = key, color = key)) +
geom_point(aes(alpha = .5)) +
theme(legend.position = "none") +
geom_smooth(formula = y~x,
method = "loess",
size=1,
se = T,
color = "grey32",
lty = "dotted",
alpha = 0.38) +
labs(subtitle = "LOESS Regression by Prediction and Language")
ggpubr::ggarrange(RandPy.boxplot, RandPy.density, RandPy.loess, RandPy.hist, ncol = 2, nrow = 1)
RandPy %>%
dplyr::select(RPH, PyPH, PredictionNumber) %>%
rename(R=RPH, Py=PyPH) %>%
gather(key, value, -PredictionNumber) %>%
ggplot(aes(PredictionNumber, value, color = key)) +
labs(
x = "PredictionNumber (Position)",
y = "PH",
subtitle =
"Combined Predictions Scatterplot: R and Python") +
geom_point(fill = "white",
size=1,
shape=1) +
geom_smooth(formula = y~x,
method = "loess",
size=1,
se = T,
color = "yellow1",
lty = "solid") +
geom_smooth(formula = y~x,
method = "lm",
size=1,
se = F,
color = "grey24",
lty = "dotdash")
read.csv("https://docs.google.com/spreadsheets/d/1ka0f6a_xYkxmjAVeI8y8lihH6h5pMBzc5Stza6H-2Y8/edit?usp=sharing")
# Packages
library(tidyverse)
library(rjson)
library(tigris)
library(plotly)
library(geojsonsf)
library(sf)
# Cleaning
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
# Import personal income CAINC1
# It contains Personal Income, Pop, Per Capita Personal Income
inc_counties <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/608/Final/Data/CAINC1_AllCounties_1969_2019.csv")
sample.df2019 <- inc_counties %>%
gather(year, value, -GeoFIPS, -GeoName, -Region,
-TableName, -LineCode, -IndustryClassification,
-Description, -Unit)  %>% # Keep descriptors for each County
filter(year == 'X2019') %>% # Filter by year of our choice (1969 - 2019)
slice(-c(1:3)) # Remove US Totals/Averages
# Convert all values to numeric tpye
sample.df2019$value <- as.numeric(sample.df2019$value)
sample.df2019 <- sample.df2019 %>%
filter(LineCode == 3) # Subset to per capita personal income by county
# Locate which index values are not counties (list includes state, regions, by GeoFIPS)
indecies <- str_which(sample.df2019$GeoFIPS, pattern = "\\d{2}(000)")
# Use a boolean array to subset the sample df by indexes of GeoFIPS
test <- subset(sample.df2019, (sample.df2019[indecies,1] == sample.df2019$GeoFIPS))
test1 <- sample.df2019 %>%
slice(indecies) # Select/extract rows where indexes match
test2 <- sample.df2019 %>%
slice(-indecies) # Select/extract all rows where indexes do not match
# Remove quotations and whitespace from county GeoFIPS codes
test2$GeoFIPS <- str_remove_all(test2$GeoFIPS, '\\\"')
test2$GeoFIPS <- str_remove(test2$GeoFIPS, "\\s")
# for ease of access/reproducibility; export as csv to Git
# write.csv(test2, "C:/Users/Owner/Documents/Data/test2.csv")
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character")) # Import Plotly's FIPS codes by county
df$fips == test2$GeoFIPS # Confirm our county FIPS codes match
test2.med <- median(test2$value, na.rm=T) # Find median of all values as if NA's were removed
test2[which(test2$GeoFIPS == "56039"),"value"] <- test2.med # To get it to not skew results
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
df <- inc_counties %>%
gather(year, value, -GeoFIPS, -GeoName, -Region,
-TableName, -LineCode, -IndustryClassification,
-Description, -Unit)  %>% # Keep descriptors for each County
slice(-c(1:3))
df$year <- as.numeric(str_remove(df$year, "^X"))
df$value <- as.numeric(df$value)
indecies <- str_which(df$GeoFIPS, pattern = "\\d{2}(000)")
df_noncounty <- df %>%
slice(indecies) # Select/extract rows where indexes match
df <- df %>%
slice(-indecies) %>%
na.exclude()
df.summary <- df %>%
group_by(LineCode, Description, year) %>%
summarize(MedianValue = median(value, na.rm = T),
MeanValue = mean(value, na.rm = T))
df$GeoFIPS <- str_remove_all(df$GeoFIPS, '\\\"')
df$GeoFIPS <- str_remove(df$GeoFIPS, "\\s")
df %>%
filter(Description == "Per capita personal income (dollars) 2/") %>%
filter(year == 2019) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0)) %>%
layout(geo = g,
title = "2019 US Median Incomes by County"))
df %>%
filter(Description == "Per capita personal income (dollars) 2/") %>%
filter(year == 2019) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0)) %>%
layout(geo = g,
title = "2019 US Median Incomes by County"))
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0)) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0)) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
# Gene Expression
# Breast Cancer MAINZ
install.packages("Biobase")
library(Biobase)
install.packages("Bioconductor")
source("https://bioconductor.org/bioLite.R")
biocLite("Biobase")
install.packages("https://bioconductor.org/bioLite.R")
source("https://bioconductor.org/bioLite.R")
biocLite("Biobase")
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
head(df)
df$X..DOCTYPE.html.
read.delim("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
df <- read.delim("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
df <- read.delim("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https:\\\spsmailcuny-my.sharepoint.com\:x:\g\personal\zachary_palmore20_spsmail_cuny_edu\EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https:\\spsmailcuny-my.sharepoint.com\:x:\g\personal\zachary_palmore20_spsmail_cuny_edu\EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
readxl::read_xlsx("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
readxl::read_xlsx("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
require(dplyr)
df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
require(dplyr)
setwd("C:/Users/Zachary Palmore/GitHub/Home/Financial")
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US")
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
View(df)
class(df$MORTGAGE30US)
class(df$DATE)
df$DATE <- as.Date(df$DATE)
df$DATE
t <- 30 # Length of loan (Must be 30 year fixed for these rates)
term <- 30 # Length of loan (Must be 30 year fixed for these rates)
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
df$DATE <- as.Date(df$DATE)
mortgage_amount <- 100000
View(df)
df %>%
mutate(YR30 = MORTGAGE30US)
df %>%
transmute(YR30 = MORTGAGE30US)
View(df)
df %>%
transmute(YR30 = MORTGAGE30US) %>%
mutate(n = term * 12)
down_payment <- 20000
df %>%
transmute(YR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.02)
df %>%
transmute(YR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.2)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = IRYR30 * (1 + IRYR30)^n,
denominator = (1 + IRYR30)^n -1,
)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = principal( (IRYR30 * (1 + IRYR30)^n) /
(1 + IRYR30)^n -1)
)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = principal * ( (IRYR30 * (1 + IRYR30)^n) /
(1 + IRYR30)^n -1)
)
require(dplyr)
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
df$DATE <- as.Date(df$DATE)
term <- 30 # Length of loan (Must be 30 year fixed for these rates)
mortgage_amount <- 100000
down_payment <- 20000
df %>%
transmute(Date = as.Date(DATE),
IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = principal * ( (IRYR30 * (1 + IRYR30)^n) /
(1 + IRYR30)^n -1)
)
