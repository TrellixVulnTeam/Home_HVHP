add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0)) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0)) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
fluidRow(
column(12,
selectizeInput(
inputId = "Filter",
label = "Select Filter:",
choices = unique(df$Description),
selected = "Per capita personal income (dollars) 2/",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df$year),
selected = "2019",
multiple = F)
),
plotlyOutput(outputId = "p", height = "800px", width = "1000px"),
hr(),
helpText("Data Source: (WAS NOT FROM) CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
df %>%
filter(Description == input$Filter) %>%
filter(year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df$GeoFIPS,
z=df$value,
colorscale="Viridis",
zmin=0,
zmax=200000,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "2019 US Median Incomes by County") %>%
layout(geo = g)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
# Gene Expression
# Breast Cancer MAINZ
install.packages("Biobase")
library(Biobase)
install.packages("Bioconductor")
source("https://bioconductor.org/bioLite.R")
biocLite("Biobase")
install.packages("https://bioconductor.org/bioLite.R")
source("https://bioconductor.org/bioLite.R")
biocLite("Biobase")
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
head(df)
df$X..DOCTYPE.html.
read.delim("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
df <- read.delim("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
df <- read.delim("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https:\\\spsmailcuny-my.sharepoint.com\:x:\g\personal\zachary_palmore20_spsmail_cuny_edu\EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https:\\spsmailcuny-my.sharepoint.com\:x:\g\personal\zachary_palmore20_spsmail_cuny_edu\EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
read.csv("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
readxl::read_xlsx("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
readxl::read_xlsx("https://spsmailcuny-my.sharepoint.com/:x:/g/personal/zachary_palmore20_spsmail_cuny_edu/EX30TP2o9uZBpgpT3kQ0fs8BW0o0y1FP7ZcfShDaKZy6ig?e=2j7np3")
require(dplyr)
df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
require(dplyr)
setwd("C:/Users/Zachary Palmore/GitHub/Home/Financial")
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US")
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
View(df)
class(df$MORTGAGE30US)
class(df$DATE)
df$DATE <- as.Date(df$DATE)
df$DATE
t <- 30 # Length of loan (Must be 30 year fixed for these rates)
term <- 30 # Length of loan (Must be 30 year fixed for these rates)
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
df$DATE <- as.Date(df$DATE)
mortgage_amount <- 100000
View(df)
df %>%
mutate(YR30 = MORTGAGE30US)
df %>%
transmute(YR30 = MORTGAGE30US)
View(df)
df %>%
transmute(YR30 = MORTGAGE30US) %>%
mutate(n = term * 12)
down_payment <- 20000
df %>%
transmute(YR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.02)
df %>%
transmute(YR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.2)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = IRYR30 * (1 + IRYR30)^n,
denominator = (1 + IRYR30)^n -1,
)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = principal( (IRYR30 * (1 + IRYR30)^n) /
(1 + IRYR30)^n -1)
)
df %>%
transmute(IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = principal * ( (IRYR30 * (1 + IRYR30)^n) /
(1 + IRYR30)^n -1)
)
require(dplyr)
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
df$DATE <- as.Date(df$DATE)
term <- 30 # Length of loan (Must be 30 year fixed for these rates)
mortgage_amount <- 100000
down_payment <- 20000
df %>%
transmute(Date = as.Date(DATE),
IRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
principal = mortgage_amount - actual_down_payment,
numerator = principal * ( (IRYR30 * (1 + IRYR30)^n) /
(1 + IRYR30)^n -1)
)
library(shiny); runApp('AmortizerCalculator.R')
df %>%
filter(Date > input$DateSelection,
Date < input$DateSelection) %>%
ggplot(aes(Date, APRYR30)) +
geom_line(col = input$plotcolor, alpha = input$alpha) +
theme_function()
runApp('AmortizerCalculator.R')
require(dplyr)
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
term <- 30 # Length of loan (Must be 30 year fixed for these rates)
mortgage_amount <- 100000
down_payment <- 20000
source("C:/Users/Zachary Palmore/GitHub/Home/Financial/Amortizer.R", echo=TRUE)
df <- df %>%
transmute(Date = as.Date(DATE),
APRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
net_principal = mortgage_amount - actual_down_payment,
monthly_ir = (APRYR30/100)/12,
monthy_payment = net_principal*(((monthly_ir * (1 + monthly_ir)^n))/((1+monthly_ir)^n))
# numerator = principal * ( (IRYR30 * (1 + IRYR30)^n) /
#                         (1 + IRYR30)^n -1)
)
# Smaller, more recent dataset
# df <- data.frame(readxl::read_xlsx("Data/mortgage_rates_30yr_fixed.xlsx"))
# Data from 1971-04-02 until 2022-04-21
df <- read.csv("Data/MORTGAGE30US.csv")
term <- 30 # Length of loan (Must be 30 year fixed for these rates)
mortgage_amount <- 100000
down_payment <- 20000
df <- df %>%
transmute(Date = as.Date(DATE),
APRYR30 = MORTGAGE30US) %>%
mutate(n = term * 12,
rec_down_payment = mortgage_amount * 0.20,
actual_down_payment = down_payment,
net_principal = mortgage_amount - actual_down_payment,
monthly_ir = (APRYR30/100)/12,
monthy_payment = net_principal*(((monthly_ir * (1 + monthly_ir)^n))/((1+monthly_ir)^n))
# numerator = principal * ( (IRYR30 * (1 + IRYR30)^n) /
#                         (1 + IRYR30)^n -1)
)
View(df)
save(df, app.Rdata)
save(df, "Data/app.Rdata")
save(df, file= "Data/app.Rdata")
load(app.Rdata)
load(app.Rdata)
load('app.Rdata')
load('Data/app.Rdata')
require(ggplot2)
require(shiny)
require(dplyr)
colors <- data.frame(list(c("light blue", "white", "green", "light green", "grey", "black", "pink", "yellow", "orange", "purple", "black")))
colnames(colors) <- "col"
ui <- fluidPage(
fluidRow(
column(12,
dateRangeInput(
inputId = "DateSelection",
label = "Dates",
start = "1971-04-02",
end = "1971-06-21",
min = "1971-04-02",
max = "2022-04-21",
format = "yyyy-mm-dd",
startview = "month",
weekstart = 0,
language = "en",
separator = " to ",
width = NULL,
autoclose = TRUE
),
sliderInput("DateSelected",
"Dates:",
min = as.Date("1971-04-02","%Y-%m-%d"),
max = as.Date("2022-01-01","%Y-%m-%d"),
value=as.Date("1971-04-02"),
timeFormat="%Y-%m-%d"),
selectizeInput(
inputId = "fillcolor",
label = "Choose Color:",
choices = unique(colors$col),
selected = "light blue",
multiple = F),
selectizeInput(
inputId = "plotcolor",
label = "Choose Color:",
choices = unique(colors$col),
selected = "light blue",
multiple = F),
selectizeInput(
inputId = "plottheme",
label = "Choose Theme",
choices = c("Minimal", "BW", "Classic"),
selected = "Classic",
multiple = F),
sliderInput(
inputId = "alpha",
label = "Alpha",
min = 0,
max = 1,
value = 0.95,
step = 0.05,
ticks = T),
plotOutput(outputId = "Plot1"
# height = "1000px",
# width = "1600px"
),
plotOutput(
outputId = "Plot2"
)
))
)
server <- function(input, output){
output$Plot1 <- renderPlot({
theme_function <- switch(input$plottheme,
Minimal = theme_minimal,
BW = theme_bw,
Classic = theme_classic)
df %>%
ggplot(aes(Date, APRYR30)) +
geom_line(col = input$plotcolor, alpha = input$alpha) +
theme_function()
})
output$Plot2 <- renderPlot({
df %>%
filter(Date > input$DateSelection,
Date < input$DateSelection) %>%
ggplot(aes(Date, APRYR30)) +
geom_line(col = input$plotcolor, alpha = input$alpha) +
theme_function()
})
}
shiny::shinyApp(ui, server)
runApp('AmortizerCalculator.R')
df %>%
filter(Date > "1971-04-02" & Date < "1971-08-02") %>%
ggplot(aes(Date, APYR30)) + geom_line()
df %>%
filter(Date > "1971-04-02" & Date < "1971-08-02") %>% View()
df %>%
filter(Date > "1971-04-02" & Date < "1971-08-02") %>%
ggplot(aes(Date, APRYR30)) + geom_line()
ui <- fluidPage(
fluidRow(
column(12,
dateRangeInput(
inputId = "DateSelection",
label = "Dates",
start = "1971-04-02",
end = "1971-06-21",
min = "1971-04-02",
max = "2022-04-21",
format = "yyyy-mm-dd",
startview = "month",
weekstart = 0,
language = "en",
separator = " to ",
width = NULL,
autoclose = TRUE
),
sliderInput("DateSelected",
"Dates:",
min = as.Date("1971-04-02","%Y-%m-%d"),
max = as.Date("2022-01-01","%Y-%m-%d"),
value=as.Date("1971-04-02"),
timeFormat="%Y-%m-%d"),
selectizeInput(
inputId = "fillcolor",
label = "Choose Color:",
choices = unique(colors$col),
selected = "light blue",
multiple = F),
selectizeInput(
inputId = "plotcolor",
label = "Choose Color:",
choices = unique(colors$col),
selected = "light blue",
multiple = F),
selectizeInput(
inputId = "plottheme",
label = "Choose Theme",
choices = c("Minimal", "BW", "Classic"),
selected = "Classic",
multiple = F),
sliderInput(
inputId = "alpha",
label = "Alpha",
min = 0,
max = 1,
value = 0.95,
step = 0.05,
ticks = T),
plotOutput(outputId = "Plot1"
# height = "1000px",
# width = "1600px"
),
plotOutput(
outputId = "Plot2"
)
))
)
server <- function(input, output){
output$Plot1 <- renderPlot({
theme_function <- switch(input$plottheme,
Minimal = theme_minimal,
BW = theme_bw,
Classic = theme_classic)
df %>%
ggplot(aes(Date, APRYR30)) +
geom_line(col = input$plotcolor, alpha = input$alpha) +
theme_function()
})
output$Plot2 <- renderPlot({
theme_function <- switch(input$plottheme,
Minimal = theme_minimal,
BW = theme_bw,
Classic = theme_classic)
df %>%
filter(Date > input$DateSelection,
Date < input$DateSelection) %>%
ggplot(aes(Date, APRYR30)) +
geom_line(col = input$plotcolor, alpha = input$alpha) +
theme_function()
})
}
runApp('AmortizerCalculator.R')
